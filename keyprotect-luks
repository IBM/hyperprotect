#!/usr/bin/env python3
#
# SPDX-License-Identifier: Apache-2.0
#
# Key Protect Interface for keyprotect-LUKS service via Python
#
# Nayna Jain <nayna@linux.ibm.com>, George Wilson <gcwilson@linux.ibm.com>
#
# Copyright (C) 2021 IBM Corp.
#

import configparser
import argparse
import os
import subprocess
import sys
import keyprotect
from keyprotect import bxauth


# Read kp.ini config file

config = configparser.ConfigParser()
config.read('/etc/keyprotect-luks.ini')

# Parse args

parser = argparse.ArgumentParser()
parser.add_argument('op', choices=['list', 'createcrk', 'createstd', 'get', 'wrap', 'genwrap', 'unwrap', 'process', 'delete'])
parser.add_argument('--uuid', default=None)
parser.add_argument('--dek', default=None)
parser.add_argument('--name', default=None)
args = parser.parse_args()
# print(args.op)

# Initialize the key management service client as specified in Authentication

tm = bxauth.TokenManager(api_key=config['KP']['api_key'])
kp = keyprotect.Client(
    credentials=tm,
    region=config['KP']['region'],
    service_instance_id=config['KP']['service_instance_id'],
    endpoint_url=config['KP']['endpoint_url']
)

# print(kp)

# Process op

if args.op == 'list':
    keys = kp.keys()
    for key in kp.keys():
        print("%s\t%s" % (key["id"], key["name"]))

elif args.op == 'createcrk':
    if args.name == None:
        print("Missing CRK --name for createcrk op")
    else:
        rootkey = kp.create(name=args.name, root=True)
        print("Created key '%s'" % rootkey['id'])

elif args.op == 'createstd':
    if args.name == None:
        print("Missing standard key --name for createstd op")
    else:
        rootkey = kp.create(name=args.name, root=False)
        print("Created key '%s'" % rootkey['id'])

elif args.op == 'wrap':
    if args.uuid == None:
        print("Missing CRK --uuid for wrap op")
    if args.dek == None:
        print("Missing --dek for wrap op")
    else:
        wrappedkey = kp.wrap(args.uuid, plaintext=args.dek.encode('utf-8'))
        ciphertext = wrappedkey.get("ciphertext")
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        # print("ciphertext = %s" % ciphertext)
        #print("plaintext = %s" % plaintext.decode('utf-8'))
        print(ciphertext)

elif args.op == 'get':
    if args.uuid == None:
        print("Missing --uuid for get op")
    else:
        key = kp.get(args.uuid)
        print(key)
        #print("%s\t%s" % (key["id"], key["name"]))

elif args.op == 'genwrap':
    if args.uuid == None:
        print("Missing CRK --uuid for genwrapwrap op")
    else:
        wrappedkey = kp.wrap(args.uuid, plaintext=os.urandom(32))
        ciphertext = wrappedkey.get("ciphertext")
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        # print("ciphertext = %s" % ciphertext)
        # print("plaintext = %s" % plaintext)
        print(ciphertext)

elif args.op == 'unwrap':
    if args.uuid == None:
        print("Missing CRK --uuid for genwrapwrap op")
    else:
        ciphertext = sys.stdin.read()
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        print(plaintext)

elif args.op == 'process':
    if args.uuid == None:
        print("Missing CRK --uuid for process op")
    for filename in os.listdir('/var/lib/keyprotect-luks'):
        print(filename)
        file = open('/var/lib/keyprotect-luks/' + filename)
        ciphertext = file.read()
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        keyctl_proc = subprocess.Popen(('keyctl', 'padd', 'logon', filename, '@u'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        outs, errs = keyctl_proc.communicate(input=plaintext)
        # keyctl_proc.wait()

elif args.op == 'delete':
    if args.uuid == None:
        print("Missing root key --uuid for delete op")
    else:
        deleted_key = kp.delete(args.uuid)
        print("Deleted key '%s'" % args.uuid)

else:
    print("Unknown op arg: %s" % args.op)

exit(0)
