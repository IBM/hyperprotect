#!/usr/bin/env python3
#
# SPDX-License-Identifier: Apache-2.0
#
# Key Protect Interface for keyprotect-LUKS service via Python
#
# Nayna Jain <nayna@linux.ibm.com>, George Wilson <gcwilson@linux.ibm.com>
#
# Copyright (C) 2021 IBM Corp.
#

import configparser
import argparse
import os
import subprocess
import sys
import keyprotect
from keyprotect import bxauth

CONFIG_FILE = '/etc/keyprotect-luks.ini'
KEY_BYTES = 32
WRAPPED_KEY_DIR = '/var/lib/keyprotect-luks'

key_types = ('logon', 'user')


#
#  Parse config file
#

def parse_config(config_file):
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    return config
#
#  Parse args
#

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('op', choices=['list', 'createcrk', 'createstd', 'get', 'wrap', 'genwrap', 'unwrap', 'process', 'delete'])
    parser.add_argument('--uuid', default=None)
    parser.add_argument('--dek', default=None)
    parser.add_argument('--name', default=None)
    args = parser.parse_args()
    # print(args.op)
    return args

#
#  Initialize key protect
#

def init_keyprotect(api_key, region, service_instance_id, endpoint_url):
    tm = bxauth.TokenManager(api_key = api_key)
    kp = keyprotect.Client(credentials=tm,
                           region=region,
                           service_instance_id=service_instance_id,
                           endpoint_url=endpoint_url)
    return kp

#
#  Iterate over keys in a directory for a given time and create keyring keys
#

def process_keys_of_type(key_type):
    wrapped_key_dir_of_type = WRAPPED_KEY_DIR + '/' + key_type
    for filename in os.listdir(wrapped_key_dir_of_type):
        print(filename, end=' ')
        file = open(wrapped_key_dir_of_type + '/' + filename)
        ciphertext = file.read()
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        keyctl_proc = subprocess.Popen(('keyctl', 'padd', key_type, filename, '@u'), stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # keyctl_proc = subprocess.Popen(('cat > /tmp/myoutfile'), shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        outs, errs = keyctl_proc.communicate(input=plaintext)
        print(outs.decode('utf-8'), end='', flush=True)


# Read config file and parse args

config = parse_config(CONFIG_FILE)
args = parse_args()

# Initialize the key management service client as specified in Authentication

kp = init_keyprotect(config['KP']['api_key'],
                     config['KP']['region'],
                     config['KP']['service_instance_id'],
                     config['KP']['endpoint_url'])

# print(kp)

# Process op

if args.op == 'list':
    keys = kp.keys()
    for key in kp.keys():
        print('%s\t%s' % (key['id'], key['name']))

elif args.op == 'createcrk':
    if args.name == None:
        print('Missing CRK --name for createcrk op', file=sys.stderr)
    else:
        rootkey = kp.create(name=args.name, root=True)
        print('Created key %s' % rootkey['id'])

elif args.op == 'createstd':
    if args.name == None:
        print('Missing standard key --name for createstd op', file=sys.stderr)
    else:
        rootkey = kp.create(name=args.name, root=False)
        print('Created key %s' % rootkey['id'])

elif args.op == 'wrap':
    if args.uuid == None:
        if config['KP']['default_crk_uuid'] == None:
            print('No default CRK UUID in config file and missing CRK --uuid for genwrap op', file=sys.stderr)
        else:
            args.uuid = config['KP']['default_crk_uuid']
    if args.dek == None:
        print('Missing --dek for wrap op', file=sys.stderr)
    if args.uuid != None and args.dek != None:
        wrappedkey = kp.wrap(args.uuid, plaintext=args.dek.encode('utf-8'))
        ciphertext = wrappedkey.get('ciphertext')
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        # print('ciphertext = %s' % ciphertext)
        #print('plaintext = %s' % plaintext.decode('utf-8'))
        print(ciphertext)

elif args.op == 'get':
    if args.uuid == None:
        print('Missing --uuid for get op', file=sys.stderr)
    else:
        key = kp.get(args.uuid)
        print(key)
        #print('%s\t%s' % (key['id'], key['name']))

elif args.op == 'genwrap':
    if args.uuid == None:
        if config['KP']['default_crk_uuid'] == None:
            print('No default CRK UUID in config file and missing CRK --uuid for genwrap op', file=sys.stderr)
        else:
            args.uuid = config['KP']['default_crk_uuid']
    if args.uuid != None:
        wrappedkey = kp.wrap(args.uuid, plaintext=os.urandom(KEY_BYTES))
        ciphertext = wrappedkey.get('ciphertext')
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        # print('ciphertext = %s' % ciphertext)
        # print('plaintext = %s' % plaintext)
        print(ciphertext)

elif args.op == 'unwrap':
    if args.uuid == None:
        if config['KP']['default_crk_uuid'] == None:
            print('No default CRK UUID in config file and missing CRK --uuid for unwrap op', file=sys.stderr)
        else:
            args.uuid = config['KP']['default_crk_uuid']
    if args.uuid != None:
        ciphertext = sys.stdin.read()
        plaintext = kp.unwrap(key_id=args.uuid, ciphertext=ciphertext)
        sys.stdout.buffer.write(plaintext)

elif args.op == 'process':
    if args.uuid == None:
        if config['KP']['default_crk_uuid'] == None:
            print('No default CRK UUID in config file and missing CRK --uuid for process op', file=sys.stderr)
        else:
            args.uuid = config['KP']['default_crk_uuid']
    if args.uuid != None:
        for key_type in key_types:
            process_keys_of_type(key_type)

elif args.op == 'delete':
    if args.uuid == None:
        print('Missing root key --uuid for delete op', file=sys.stderr)
    else:
        deleted_key = kp.delete(args.uuid)
        print('Deleted key %s' % args.uuid)

else:
    print('Unknown op arg: %s' % args.op, file=sys.stderr)

exit(0)
